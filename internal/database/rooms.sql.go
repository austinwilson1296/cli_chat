// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rooms.sql

package database

import (
	"context"
	"database/sql"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO rooms(room_id,room_name,description,room_owner)
VALUES (
    ?,
    ?,
    ?,
    ?
)
`

type CreateRoomParams struct {
	RoomID      string
	RoomName    string
	Description sql.NullString
	RoomOwner   string
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.ExecContext(ctx, createRoom,
		arg.RoomID,
		arg.RoomName,
		arg.Description,
		arg.RoomOwner,
	)
	return err
}

const listRoom = `-- name: ListRoom :one
SELECT room_id, room_name, description, room_owner FROM rooms
WHERE room_name = ?
`

func (q *Queries) ListRoom(ctx context.Context, roomName string) (Room, error) {
	row := q.db.QueryRowContext(ctx, listRoom, roomName)
	var i Room
	err := row.Scan(
		&i.RoomID,
		&i.RoomName,
		&i.Description,
		&i.RoomOwner,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT room_id, room_name, description, room_owner FROM rooms
`

func (q *Queries) ListRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.RoomID,
			&i.RoomName,
			&i.Description,
			&i.RoomOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
